from pathlib import PurePath
import re

import pandas as pd

beta_metrics_path = "config/beta_div_metrics.tsv"
beta_metrics = pd.read_table(beta_metrics_path, sep="\t")

distance_matrices = [
    f"results/beta_div/{row['metric_type']}/{row['metric']}/distance-matrix.tsv"
    for i, row in beta_metrics.iterrows()
]

effect_sizes = [
    f"results/beta_div/{row['metric_type']}/{row['metric']}/effect_sizes.tsv"
    for i, row in beta_metrics.iterrows()
]
pw_effect_sizes = [
    f"results/beta_div/{row['metric_type']}/{row['metric']}/pairwise_effect_sizes.tsv"
    for i, row in beta_metrics.iterrows()
]

def concatenate_metric_dataframes(files):
    """Concatenate results from multiple metrics."""
    def get_metric_info(f):
        """Return metric type and metric name as tuple."""
        path_parts = PurePath(f).parts
        return path_parts[3], path_parts[4]

    all_dfs = []
    all_keys = []
    for f in files:
        this_df = pd.read_table(f, sep="\t", index_col=0)
        this_keys = get_metric_info(f)
        all_dfs.append(this_df)
        all_keys.append(this_keys)

    total_df = pd.concat(all_dfs, keys=all_keys, names=["metric_type", "metric_name"])
    total_df = total_df.reset_index(level=("metric_type", "metric_name"))
    return total_df


rule concatenate_effect_sizes:
    input:
        effect_sizes
    output:
        "results/beta_div/all_metrics_effect_sizes.tsv"
    run:
        all_metrics_df = concatenate_metric_dataframes(input)
        all_metrics_df.to_csv(output[0], sep="\t", index=False)


configfile: "config/config.yaml"

include: "rules/beta_diversity.smk"
include: "rules/evident.smk"
